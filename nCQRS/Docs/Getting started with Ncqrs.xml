<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbook.rng" type="xml"?>
<book version="5.0" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:svg="http://www.w3.org/2000/svg"
    xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:html="http://www.w3.org/1999/xhtml">
    <info>
        <title>Getting Started with Ncqrs</title>
        <author>
            <personname><firstname>Pieter Joost</firstname><surname>van de
                Sande</surname></personname>
        </author>
        <pubdate>not yet</pubdate>
    </info>
    <chapter>
        <title>Introduction</title>
        <para>This reference documentation explains what the Ncqrs framework is, how it can help and
            how you can use it.</para>
        <section>
            <title>What is Ncqrs?</title>
            <para>Ncqrs is a framework for .NET that assists in building scalable, extensible and
                maintainable applications by helping developers apply the Command Query
                Responsibility Segregation (CQRS) architectural pattern. It does so by providing an
                infrastructure and implementations for the most important building blocks of command
                handling and execution, domain modeling, event sourcing, domain events,
                denormalization and event storage. These building blocks help you to focus on code
                that adds business value. They come with annotation, convention and configuration
                support and help you to write isolated and testable code.</para>
        </section>
        <section>
            <title>When to use Ncqrs</title>
            <para>Scotty said in Star Trek V: <emphasis>“How many times do I have to tell you, the
                    right tool for the right job!“</emphasis>. Ncqrs isn't the right tool for every
                job. This means that not every application will benefit from using Ncqrs. Simple
                    <link xlink:href="http://en.wikipedia.org/wiki/Create,_read,_update_and_delete"
                    >CRUD</link> based systems without much behavior are unlikely to benefit from
                using this pattern. But there are a wide variety of applications that could benefit
                from Ncqrs.</para>
            <para>Applications will most likely benefit from Ncqrs when they have one or more of the
                following characteristics:</para>
            <orderedlist>
                <listitem>
                    <para><emphasis role="bold">Long life time</emphasis> The project will exist for
                        a long period of time and needs to be able to grow organically.</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">Needs to be scalable</emphasis> The application
                        needs the capacity to be scalable.</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">Contain business logic</emphasis> The application
                        contains business logic that needs to stay maintainable.</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">Demand for integration</emphasis>Other applications
                        need to be able to integrate with it.</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">Having multiple views</emphasis> There are multiple
                        screens, reports or applications that have their own view of the
                        data.</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">Requirement for auditability </emphasis> All state
                        changes must be logged and an auditable log needs to be maintained.</para>
                </listitem>
            </orderedlist>
        </section>
        <section>
            <title>System requirements</title>
            <para> You need the .NET Framework 3.5 or higher to use the Ncqrs framework. </para>
        </section>
        <section>
            <title>License information</title>
            <para>The Ncqrs framework and its documentation are licensed under the Apache License,
                Version 2.0 (the “License”); you may not use this file except in compliance with the
                License. You may obtain a copy of the License at <link
                    xlink:href="http://www.apache.org/licenses/LICENSE-2.0"/>.</para>
            <para>Unless required by applicable law or agreed to in writing, software distributed
                under the License is distributed on an “AS IS” BASIS, WITHOUT WARRANTIES OR
                CONDITIONS OF ANY KIND, either express or implied. See the License for the specific
                language governing permissions and limitations under the License.</para>
        </section>
    </chapter>
    <chapter>
        <title>Contribution</title>
        <section>
            <title>Introduction</title>
            <para>Ncqrs is an open source project driven by software developers who love to make the
                world just that little bit better. The project is driven by people's contribution:
                whether they give feedback, make a bug report, fix some code or add some
                documentation. The project would not be a success without the people that
                contribute. They keep the project vibrant, alive and progressive.</para>
            <para>Active contribution, a contribution period longer than 3 months, is rewarded with
                licenses for the following products: <itemizedlist>
                    <listitem>
                        <para>ReSharper</para>
                    </listitem>
                    <listitem>
                        <para>NDepend</para>
                    </listitem>
                    <listitem>
                        <para>OxygenXML</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>Please consider contribution in one or more ways as described in this
                chapter.</para>
        </section>
        <section>
            <title>Feedback</title>
            <para>One of the key drivers for us is feedback. We take all feedback seriously and it
                helps us in decision making and in choosing the parts of the project that we devote
                time to. Feedback can also be a good way to put a smile on our faces! Whether you
                just want to say that we rock, that you would like to see feature X or Y, or that
                you are confused about something related to the project you can get your feedback to
                us in one of the follow ways:</para>
            <itemizedlist>
                <listitem>
                    <para><link xlink:href="http://twitter.com/ncqrs">@ncqrs at
                        twitter</link></para>
                </listitem>
                <listitem>
                    <para><link xlink:href="mailto:feedback@ncqrs.org">Feedback mail</link></para>
                </listitem>
                <listitem>
                    <para><link xlink:href="http://groups.google.com/group/ncqrs-dev">Ncqrs-dev
                            discussion group at google</link></para>
                </listitem>
            </itemizedlist>
        </section>
        <section>
            <title>Documentation</title>
            <para>A solid framework is one thing, but a framework is almost worthless without
                documentation. Applications that are built using the Ncqrs framework will have
                documentation as part of their fundament. The choice of a component can have a big
                impact on the future of an application. Documentation is important to guide people
                and to prevent them from making mistakes. This documentation can come in many ways,
                for example, the current form that you are reading. But also quick-starts, blog
                posts, how-to videos: they all have a big impact. Have you blogged about your
                experience with Ncqrs? Have you found a weak spot in our documentation or do you
                have any other contribution? Please let us know!</para>
            <para>This documentation is stored in the main repository of the framework, so you can
                fork it, make a change and do a pull request.</para>
        </section>
    </chapter>
    <chapter>
        <title>The architecture</title>
        <section>
            <title>Introduction</title>
            <para>Change is a fact of life in software development. Knowledge moves forward, new
                insights are obtained and so requirements change. This makes it important to develop
                applications that can deal with change. A well known way to solve this problem is to
                split a system into layers. This architecture is known as N-tier. In this
                architecture the system is horizontally split into logical layers that depend on
                each other like a stack of plates. A layer only depends on the layer below. Layers
                never depend on a layer above, or further down then the direct layer below. This is
                a great way to reach a certain level of abstraction. It also gives the ability to
                replace a particular implementation without breaking a lot. You only break the
                contract with the layer that depends on the layer that gets replaced, and that is
                always zero for the top layer and only one for all others. </para>
            <para>Although N-tier has been the standard for years, it also comes with a price.
                Layers hides a lot of power and details. They can only use the power of a layer
                directly below, never a layer below that one.  It also does not allow you to
                optimize layers for a certain concern other then broad ones like User Interface,
                Business and Data Access. For example, the User Interface uses Objects from the
                Business tier but can never query the data directly from the database.</para>
            <para>Ncqrs helps developers apply the Command Query Responsibility Segregation (CQRS)
                architectural pattern. This pattern itself is quite simple. It states that the
                component that processes commands should be separated from the one that processes
                queries.</para>
            <para>Instead of separating the system in horizontal layers, as we know from N-tier
                architectures, we also separate them vertically. This means that instead of defining
                layers for user interface, business logic and data storage, we split by commands and
                queries.</para>
        </section>
        <section>
            <title>The big picture</title>
            <para>
                <figure xml:id="architecture-overview" xreflabel="">
                    <title>Architecture overview</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="images/architecture-overview.png" width=""/>
                        </imageobject>
                    </mediaobject>
                </figure>
            </para>
            <para linkend="system-flow">The figure <xref linkend="architecture-overview"/> shows the
                architectural overview of a CQRS based system. The first thing you should notice is
                that it is not just horizontally layered as you might recognise from general
                architectures. It is fundamentally separated by a read and a write side. This means
                that the user interface - or any other top component - doesn't use the same model to
                read data as it does to write data. Instead of getting for example customer data,
                modifying it and save the changes, the user interface reads all the data needed from
                a read database, displays it to the user and to make modifications it sends commands
                to the command handlers. These command handlers make changes to the domain. The
                changes in the domain cause events to occur: these events represent the changes. The
                events are stored and published to denormalizers. The denormalizers make
                modifications to the read database according to the events and event data. This way
                the read databases are kept up to date. Now the user interface can read the data
                again and we have a closed loop. This process is illustrated in <xref
                    linkend="system-flow"/>.</para>
            <para>
                <figure xml:id="system-flow">
                    <title>System flow</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="images/system_flow.png" width=""/>
                        </imageobject>
                    </mediaobject>
                </figure>
            </para>
        </section>
    </chapter>
    <chapter>
        <title>Components</title>
        <section>
            <title>Command handlers</title>
            <para>The user interface sends commands to make changes to the system. Commands are
                simple objects that contain all the data needed to perform the underlying action. An
                example of the command could be <code>MoveUserToNewAddress</code>. The command
                should hold the new address for the user and the user id that indicates which user
                has moved.</para>
            <para>Commands also tend to express their intent through their name. For example,
                although the command <code>MoveUserToNewAddress</code> and
                    <code>CorrectAddressForUser</code> both contain the same data – the address and
                the user id – the intent is definitely different. All commands are sent to a Command
                Service. This service receives the commands and routes them to the corresponding
                command executors. All command executors respond to a specific command and execute
                an action based on the command's content. Command executors should not contain any
                business logic. The only thing they do is to make changes to aggregate roots from
                the domain. To stay away from plumbing code, Ncqrs supports mapping for commands to
                map a command directly to a domain object through convention.</para>
        </section>
        <section>
            <title>The Domain</title>
            <para>Command executors make changes to aggregate roots in the domain. All business
                logic is captured within these objects and is not used for querying. This allows us
                to optimize this model for behavior. Aggregate roots contain the actual business
                logic and are responsible for guarding their own invariants. State changes on
                aggregate roots cause domain events to occur. This sequence of domain events
                represents all the changes that have been made. This pattern is called Event
                Sourcing.</para>
        </section>
        <section>
            <title>Events</title>
            <para>All state changes in the domain are represented by domain events. They are simple
                objects that contain all data related to the change. We gave two examples of command
                names. The events that are related to the state change of these commands would be
                    <code>UserMovedToNewAddress</code> and <code>AddressCorrectedForUser</code>.
                Notice that the names are in the past tense.</para>
        </section>
        <section>
            <title>Repository</title>
            <para>The repository is used to get and save aggregate roots. This is done through their
                events. Saving an aggregate root will result in persisting all of the uncommitted
                events that occurred while making the changes to it. Getting an aggregate root is
                done by getting these events and replaying them to build up the aggregate root into
                its latest state. The events are stored in the event store and when an aggregate
                root is saved, all the events will also be published to the event store.</para>
        </section>
        <section>
            <title>Event Store</title>
            <para>All events that have occurred end up in the event store. It contains all of the
                events that represent the state changes in the system. These can be used to build up
                the current state by replaying them all. This store can also be used to fill up new
                or repair existing read models.</para>
        </section>
        <section>
            <title>Event Bus</title>
            <para>When an aggregate root is saved to the repository all of the uncommitted events
                that represent the state changes that have been made are persisted to the event
                store. Beside that, the repository also publishes these events via the event bus.
                This bus publishes them to everything that has registered itself as being interested
                in events, i.e. everything that has subscribed to the events. An event bus can be
                synchronous or asynchronous, but the read models will be consistent at some point of
                time.</para>
        </section>
        <section>
            <title>Denormalizers</title>
            <para>There are different event handlers subscribed to the events bus. The most common
                ones are denormalizers. These event handlers take events and make changes to the
                read model based upon them. For example, a denormalizer could update the users
                address in the user table based on the data in the
                    <code>UserMovedToNewAddress</code> event. But it could also update the total
                number of users in city <emphasis role="italic">X</emphasis> based on that the same
                event. </para>
            <para>Event handlers are not only useful in keeping the read model up to date. They
                could also be written to make changes to an external system or send a warning email
                to the business when certain events occur. It could also be that an event handler
                issues a new command. Event handlers are great components to extend the system with
                new functionality without making changes to the existing logic.</para>
        </section>
        <section>
            <title>Read Model</title>
            <para>An important part of every application is data. Most of the screens in a user
                interface show data. But many screens tend to have a different view of the same
                data. For example, one shows all the products with their name, price and category,
                while another shows the products with their name and top 3 latest product review
                scores and name of the reviewer. Read models are models that can be optimized for
                data querying. And what is an optimal query? It is a query that just queries the
                data from one source. In other words: select * from x where y. No joining, just give
                me the data. We can accomplish this by creating one table per view. So that every
                view can just request data by a simple query. Your read model doesn't even have to
                be a relational database, it could be a document based database that contains a
                collection for every view. Ncqrs provides a base class for denormalizers that allows
                them to subscribe to the event bus. The denormalization itself is simple and
                straightforward.</para>
        </section>
    </chapter>
    <chapter>
        <title>Aggregate Root</title>
        <section>
            <title>How they work</title>
            <section>
                <para>The base for an aggregate root is the <code>AggregateRoot</code> class. It is
                    located in the <code>Ncqrs.Domain</code> namespace. There are also base classes
                    that add mapping support.<figure>
                        <title>Making changes to an aggregate root <footnote>
                                <para>See the full sequence diagram here: <link
                                        xlink:href="http://www.websequencediagrams.com/?lz=VXNlciBDb2RlLT5BZ2dyZWdhdGUgUm9vdDogbmV3KGJheikKAAsOLT5OZXdGb29CYXJDcmVhdGVkRXZlbgAUHABJEEFwcGx5ADAFKGV2bnQADyJPbk5ld0FnZ1Jvb3QAbQcAMwcAgSQbRm9vKGJhcgCBLRJGb28AgSUNABATAG9DAF4IAIFdBg&amp;s=rose"
                                        >websequencediagrams.com</link>.</para>
                            </footnote></title>
                        <mediaobject>
                            <imageobject>
                                <imagedata fileref="images/agg-root-sequence.png"/>
                            </imageobject>
                        </mediaobject>
                    </figure></para>
                <section>
                    <title>Mapped by convention</title>
                    <para>Since aggregate roots modify their own state by handling events, you can
                        end up with a lot of event handlers. To save you having to write a lot of
                        plumbing code to wire event handlers the Ncqrs framework offers aggregate
                        root based types that support event handler mapping.</para>
                    <para>When you use the <code>AggregateRootMappedByConvention</code> class as
                        base for your aggregate roots you are able to create event handlers very
                        easily by convention. Here is an example of an event handling method in the
                        aggregate
                        root:<programlisting><code>protected void OnFooEvent(FooEvent e)
{
	// Will be mapped as a event handler for the FooEvent.
}</code></programlisting></para>
                    <para>All methods that satisfy the following convention are mapped as an event
                        handler:</para>
                    <para>
                        <orderedlist>
                            <listitem>
                                <para>Method is an instance method (not static).</para>
                            </listitem>
                            <listitem>
                                <para>Method name starts with <emphasis role="italic"
                                            ><code>On</code></emphasis> or <emphasis role="italic"
                                            ><code>on</code></emphasis>. Like:
                                        <code>OnProductAdded</code> or
                                    <code>onProductAdded</code>.</para>
                            </listitem>
                            <listitem>
                                <para>The method accepts only one parameter.</para>
                            </listitem>
                            <listitem>
                                <para>That parameter is a type of, or inherits from, the
                                        <code>SourcedEvent</code> class.</para>
                            </listitem>
                            <listitem>
                                <para>Is not marked with the <code>NoEventHandlerAttribute</code>
                                    attribute.</para>
                            </listitem>
                        </orderedlist>
                    </para>
                    <para>Although a method may be public, protected, internal, protected internal
                        or private and can be virtual we do not advise you to make event handlers
                        public.</para>
                    <section>
                        <title>Excluding methods</title>
                        <para>Sometimes you want to prevent methods that satisfy the convention from
                            being mapped. They can be excluded from the mapping by annotating them
                            with the <code>NoEventHandlerAttribute</code> attribute. All methods
                            annotated with this attribute will be ignored in the mapping process.
                            The following code shows a method that will be excluded:</para>
                        <programlisting><code>[NoEventHandler]
protected void OnFooEvent(FooEvent e)
{
    // Will not be mapped.
}</code></programlisting>
                    </section>
                </section>
            </section>
        </section>
    </chapter>
</book>
