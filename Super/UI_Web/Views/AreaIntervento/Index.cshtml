@{
    ViewBag.Title = "Area Intervento";
    Layout = "~/Content/Layout/Earthlingtwo/_Layout.cshtml";
}


    
<h2>
    Area Intervento</h2>
<div id=FilterResults>
<form id=formFilter class=formFilter>
     <fieldset>
         <legend>Filtro</legend>
         <label>Descrizione :</label><input type=text id=filtroDescrizione />

         <div style="clear: both;">&nbsp;</div>
         <a data-bind="click: GetItems" href="#">Visualizza</a> 
     </fieldset>
</form>
</div>
<div id="List" data-bind='template: "areaInterventoListTemplate"'></div>
<br />
<div id="pagination" class="pagebar"></div>
<p>
    <a data-bind="click: AggiungereItem"
        href="#">Aggiungi Area Intervento</a>
</p>
<div id="details" style="overflow: hidden;"></div>


<script type="text/html" id="Waiting">
<br>
<br>
<center>
    <img src='@Url.Content("~/Images/ajax-loader.gif")'/><br>
    <i>Loading the data</i>
</center>
<br>
<br>
</script>
<script type="text/html" id="areaInterventoListTemplate">
    <table width=100% class="table-standard"> 
            <tr>
                <th>
                    Descrizione
                </th>
                <th>
                    Inizio
                </th>
                <th>
                    Fine
                </th>
                <th>
                    CreationDate
                </th>
                <th colspan="2">
                    Azione
                </th>
            </tr>
        
         <% _.each(Items(), function(item) { %>
         <tr>
            
            <td>
                <%= item.Descrizione() %>
            </td>
            
            <td>
                <%= item.Inizio() %>
            </td>
            <td>
                <%= item.Fine() %>
            </td>
            <td>
                <%= item.CreationDate() %>
            </td>
             <td>
                <a data-bind="click: function() { viewModel.RedigereItem(item) }" href="#"><img src="@Url.Content("~/Images/Edit.gif")" border=0></a>
            </td>
            <td>
                <a data-bind="click: function() { viewModel.TogliereItem(item) }" href="#"><img src="@Url.Content("~/Images/Delete.gif")" border=0></a>
            </td>
        </tr>
         <% }) %>
        </table>
</script>
<script language="javascript">

    $.validator.unobtrusive.addValidation = function (selector) { 
        //get the relevant form 
        var form = $(selector); 
        // delete validator in case someone called form.validate()
        $(form).removeData('validator'); 
        $.validator.unobtrusive.parse(form); 
        }

    //Commands
    var VisualizzareItems = function (descrizione, pageNum, pageSize){
        this.Descrizione = descrizione;
        this.PageNum = pageNum;
        this.PageSize = pageSize;
    }
    var CreareNuovoAreaIntervento = function (id, idAreaInterventoSuper, creationDate, inizio, fine, descrizione) {
        this.Id = id;
        this.IdAreaInterventoSuper = idAreaInterventoSuper;
        this.CreationDate = creationDate;
        this.Inizio = inizio;
        this.Fine = fine;
        this.Descrizione = descrizione;
    }
    var AggiornareAreaIntervento = function (id, idAreaInterventoSuper, inizio, fine, descrizione) {
        this.Id = id;
        this.IdAreaInterventoSuper = idAreaInterventoSuper;
        this.Inizio = inizio;
        this.Fine = fine;
        this.Descrizione = descrizione;
    }
    var CancellareAreaIntervento = function (id) {
        this.Id = id;
    }

    //Repository
    var Repository = function () {
        this.GetItems = function (descrizione, pageNum, pageSize, success,error) {
            jQuery.ajaxSettings.traditional = true;
            var command = new VisualizzareItems(descrizione,pageNum,pageSize);
            $.ajax({
                type: 'Post',
                url: '@Url.Action("GetItems")',
                data: JSON.stringify(command),
                contentType: 'application/json; charset=utf-8',
                success: success,
                error: error,
                dataType: 'json'
            });
        };
        this.Add = function (selected, success, error) {
            var returnValue = false;
            var command = new CreareNuovoAreaIntervento(selected.Id(), selected.IdAreaInterventoSuper(), selected.CreationDate(), selected.Inizio(), selected.Fine(), selected.Descrizione())
            $.ajax({
                type: 'Post',
                url: '@Url.Action("Creare")',
                data: JSON.stringify(command),
                contentType: 'application/json; charset=utf-8',
                success: function() { returnValue=success(selected)},
                error: function() { returnValue=error(selected)},
                dataType: 'json',
                async: false
            });
            return returnValue;
        };
        this.Update = function (selected, success, error) {
            var returnValue = false;
            var command = new AggiornareAreaIntervento(selected.Id(), selected.IdAreaInterventoSuper(), selected.Inizio(), selected.Fine(), selected.Descrizione())
            $.ajax({
                type: 'Post',
                url: '@Url.Action("Aggiornare")',
                data: JSON.stringify(command),
                contentType: 'application/json; charset=utf-8',
                success: function() { returnValue=success(selected)},
                error: function() { returnValue=error(selected)},
                dataType: 'json',
                async: false
            });
            return returnValue;
        };
        this.Delete = function (selected, success, error) {
            var returnValue = false;
            var command = new CancellareAreaIntervento(selected.Id())
            $.ajax({
                type: 'Post',
                url: '@Url.Action("Cancellare")',
                data: JSON.stringify(command),
                contentType: 'application/json; charset=utf-8',
                success: function() { returnValue=success(selected)},
                error: function() { returnValue=error(selected)},
                dataType: 'json',
                async: false
            });
            return returnValue;
        };
    }

    //View
    var View= function() {
        var self = this;

        //Spinner
        this.Spin = function(){
            $("#List").html($("#Waiting").html());
        };
        this.StopSpin = function(){
            //do nothing for the moment
        };
        
        //dialog
        this.OpenDetails = function (urlView, title) {
            self.UrlView = urlView;

            $('#details').dialog({
                autoOpen: false,
                width: 350,
                height: 400,
                position: 'center',
                resizable: true,
                title: title,
                modal: true,
                open: function (event, ui) {
                    $(this).load(self.UrlView, function () {
                        ko.applyBindings(viewModel, document.getElementById("details"));
                    });
                },
                buttons: {
                    "Accept": function () {
                        var form= document.getElementById("formDetails");
                        if (viewModel.Accept(form))
                            $(this).dialog("close");
                    },
                    "Cancel": function () {
                        viewModel.Cancel();
                        $(this).dialog("close");
                    }
                }
            });
            details.dialog("open");  //let's put this in a custom binding handler called "openDialog"
        }

        this.CloseDetails = function () {
            details.dialog("close");
        }
           
        //pagination
        this.Paginate = function(pageNum,PageSize,totalItems, action ) {
             $("#pagination").paging(totalItems, {
                 format: "- (qq.) < nnncnnn > (.pp)",
                    perpage: PageSize,
                    lapping: 0,
                    page: pageNum,
                    onSelect: function(page) {
                        if(pageNum!=page){
                            self.Spin();
                            action(page);
                         }
                    },
                    onFormat: function(type) {

                switch (type) {
                case 'left' :
                    if (this.page>5)
                        return '<em><a href="#' + this.value + '">' + this.value + '</a></em>';
                    return "";
                case 'right' :
                    if (this.page<(this.pages-5))
                        return '<em><a href="#' + this.value + '">' + this.value + '</a></em>';
                    return "";
                case 'block':

                        if (!this.active)
                                return '<span class="disabled"  title="Pagina '+ this.value +'">' + this.value + '</span>';
                        else if (this.value != this.page)
                                return '<em><a href="#' + this.value + '" title="Pagina '+ this.value +'">' + this.value + '</a></em>';
                        return '<span class="this-page">'+ this.value +'</span>';

                case 'next':

                        if (this.active)
                                return '<a href="#' + this.value + '" class="next">></a>';
                        return '<span class="disabled">></span>';

                case 'prev':

                        if (this.active   )
                                return '<a href="#' + this.value + '" class="prev"><</a>';
                        return '<span class="disabled"><</span>';

                case 'first':

                        if (this.active)
                                return '<a href="#' + this.value + '" class="first">First</a>';
                        return '<span class="disabled">First</span>';

                case 'last':

                        if (this.active)
                                return '<a href="#' + this.value + '" class="last">Last</a>';
                        return '<span class="disabled">Last</span>';

                case "leap":
                        if (this.active &&  (this.page>5) && (this.page<(this.pages-5)))
                                return '<span class="break">...</span>';
                        return "";
                case 'fill':
                        if (this.active)
                                return "Pages:&nbsp;";
                        return "";
                    }
                }
	        });
        }
   }

    //Model
    var AreaIntervento = function (id, idAreaInterventoSuper, creationDate, inizio, fine, descrizione, isNew) {
        var self = this;
        this.Id = ko.observable(id);
        this.IdAreaInterventoSuper = ko.observable(idAreaInterventoSuper);
        this.CreationDate = ko.observable(creationDate.format("dd/mm/yyyy HH:MM"));
        this.Inizio = ko.observable(inizio.format("dd/mm/yyyy"));
        this.Fine = ko.observable(fine.format("dd/mm/yyyy"));
        this.Descrizione = ko.observable(descrizione);
        this.IsNew = isNew;

        this.EditIdAreaInterventoSuper = ko.observable(idAreaInterventoSuper);
        this.EditInizio = ko.observable(inizio.format("dd/mm/yyyy"));
        this.EditFine = ko.observable(fine.format("dd/mm/yyyy"));
        this.EditDescrizione = ko.observable(descrizione);

        //reset to originals on cancel 
        this.Cancel = function () {
            this.IdAreaInterventoSuper(this.EditIdAreaInterventoSuper()).Inizio(this.EditInizio()).Fine(this.EditFine()).Descrizione(this.EditDescrizione());
        } .bind(this);

        //persist edits to real values on accept
        this.Accept = function () {
            this.EditIdAreaInterventoSuper(this.IdAreaInterventoSuper()).EditInizio(this.Inizio()).EditFine(this.Fine()).EditDescrizione(this.Descrizione());
        } .bind(this);
    }


    

    //ViewModel
    var ViewModel = function (repository, view, pageNum, pageSize) {
        var self = this;
          
        //filtro
        this.Descrizione = ko.observable();
        this.PageNum = ko.observable(pageNum);
        this.PageSize = ko.observable(pageSize);
            
        this.Items = ko.mapping.fromJS([]);
        this.SelectedItem = ko.observable();



        
        this.GetItems = function (pageNum) {
            view.Spin();
            self.PageNum(pageNum);
            repository.GetItems(self.Descrizione(),self.PageNum(),self.PageSize(),self.GetItemsSuccess,self.GetItemsError);
        };

        this.RedigereItem = function (item) {
            viewModel.SelectedItem(item);
            view.OpenDetails("@Url.Action("Aggiornare")",'Aggiornare un area Intervento');
        };
        this.AggiungereItem = function () {
            var now = new Date();
            var newItem = new AreaIntervento(guidGenerator(),0, now, now, now, '', true)
            viewModel.SelectedItem(newItem);
            view.OpenDetails("@Url.Action("Creare")",'Aggiungere un area Intervento');
        };
        this.TogliereItem = function (item) {
            repository.Delete(item,viewModel.TogliereItemSuccess,viewModel.TogliereItemError);
        };

        this.TogliereItemSuccess = function(selected)
        {
            alert("item " + selected.Id() + " removed");
            viewModel.Items.remove(item);
        }

        this.TogliereItemError= function(selected)
        {
            alert("item " + selected.Id() + " not removed");
        }

        this.AcceptSuccess = function(selected){
            selected.Accept();
            if (selected.IsNew)            
                viewModel.Items.push(selected);
            viewModel.SelectedItem("");
            return true;
        }

        this.AcceptError = function(selected){
            return false;
        };

        this.Accept = function (form) {
            var returnValue = false;
            var selected = viewModel.SelectedItem();

            if ($(form).valid())
                if (selected.IsNew) 
                    returnValue = repository.Add(selected,viewModel.AcceptSuccess,viewModel.AcceptError);
                else
                    returnValue = repository.Update(selected,viewModel.AcceptSuccess,viewModel.AcceptError);
            else
                alert("error");
           

            return returnValue;
        };
        this.Cancel = function () {
            viewModel.SelectedItem().Cancel();
            viewModel.SelectedItem("");
            view.CloseDetails();
        };

        this.GetItemsSuccess = function (items) {
            self.Items.removeAll();
            ko.utils.arrayForEach(items.results, function (item) {
                self.Items.push(new AreaIntervento(item.Id,item.IdAreaInterventoSuper, ToDate(item.CreationDate), ToDate(item.Inizio), ToDate(item.Fine), item.Descrizione));
            });
            view.Paginate(self.PageNum(),self.PageSize(),items.count,viewModel.GetItems);
        };

        this.GetItemsError = function(){
            alert('error');
        }
    };

    
    var viewModel = new ViewModel(new Repository(),new View(), 1, 2);
    ko.applyBindings(viewModel);

    viewModel.GetItems(viewModel.PageNum());

    var details = $("#details"); //div that holds the modal dialog
    var detailsForm = $("#formDetails");

   

    

       
</script>
